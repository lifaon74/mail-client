import { EmailHeaderKey, EmailHeaderKeyWithReadonlyValue } from './email-header-key.class';
import { EmailHeaderValue } from './email-header-value.class';

/** TYPES **/

export type IEmailHeaderKeyLike =
  | EmailHeaderKey
  | string
  ;

export type IEmailHeaderValueLike =
  | EmailHeaderValue
  | string
  ;

/** CLASS **/

export class EmailHeader<GKey extends string> {

  readonly #key!: GKey;
  #value!: EmailHeaderValue;

  constructor(
    key: GKey,
    value: IEmailHeaderValueLike,
  ) {
    this.#key = key;
    this.value = value;
  }

  get key(): EmailHeaderKey {
    return this.#key;
  }

  get value(): EmailHeaderValue {
    return this.#value;
  }

  set value(
    input: IEmailHeaderValueLike,
  ) {
    this.#value = (typeof input === 'string')
      ? new EmailHeaderValue(input)
      : input;
  }

  toString(): string {
    return `${this.key.toString()}: ${this.value.toString()}`;
  }
}

