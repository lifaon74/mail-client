import {
  createMimeTypeParameterBoundary,
} from '../../../../../mime-type/boundary/create-mime-type-parameter-boundary.type';
import {
  generateBoundary,
  IGenerateBoundaryOptions,
} from '../../../../../mime-type/boundary/generate-boundary';
import {
  IMimeTypeParameter,
} from '../../../../mime-type/fragments/mime-type-parameter-list/fragments/mime-type-parameter/mime-type-parameter.type';
import {
  createMimeTypeParameterListFromIterable,
} from '../../../../../mime-type/mime-type-parameters.class';
import { createSafeMimeType } from '../../../../../mime-type/mime-type.class';
import {
  createEmailHeaderContentType,
} from '../../../fragments/header-list/fragments/header/built-in/content-type/implementations/functions/create-email-header-content-type';
import { IEmailHeader } from '../../../fragments/header-list/fragments/header/email-header.type';
import { createEmailHeaderListFromIterable } from '../../../fragments/header-list/implementations/functions/create-email-header-list-from-iterable';
import { createEmailDataMultipart, IEmailDataMultipartContent } from '../create-email-data-multipart';
import { IEmailDataMultipart } from '../email-data-multipart.type';

export interface ICreateEmailDataMultipartWithAutogeneratedBoundaryOptions {
  content: IEmailDataMultipartContent;
  boundaryOptions?: IGenerateBoundaryOptions;
  headers?: Iterable<IEmailHeader>;
  mimeTypeSubtype: string;
  mimeTypeParameters?: Iterable<IMimeTypeParameter>;
}

export function createEmailDataMultipartWithAutogeneratedBoundary(
  {
    content,
    boundaryOptions,
    headers = [],
    mimeTypeSubtype,
    mimeTypeParameters = [],
  }: ICreateEmailDataMultipartWithAutogeneratedBoundaryOptions,
): IEmailDataMultipart {
  const boundary: string = generateBoundary(
    boundaryOptions,
  );

  return createEmailDataMultipart({
    headers: createEmailHeaderListFromIterable([
      ...headers,
      createEmailHeaderContentType(
        createSafeMimeType({
          type: 'multipart',
          subtype: mimeTypeSubtype,
          parameters: createMimeTypeParameterListFromIterable([
            ...mimeTypeParameters,
            createMimeTypeParameterBoundary(boundary),
          ]),
        }),
      ),
    ]),
    content,
    boundary,
  });
}
